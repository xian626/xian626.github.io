<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Typescript</title>
    <url>/2023/03/04/Typescript/</url>
    <content><![CDATA[<p>Typescript 不是一门全新的语言, 它相当于是 JavaScript 的超集, 对 js 进行了一些规范和补充.<br>js 只会在运行时去做数据类型检查, 而 ts 作为静态类型语言, 其数据类型是在编译期间确定的, 编写代码的时候, 要明确变量的数据类型, 使用 ts 后, 就不会出现因为数据类型错误导致的代码运行异常</p>
<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">number</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum1</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum1</span>(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="built_in">any</span></span><br><span class="line">c = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="built_in">unknown</span></span><br><span class="line">d = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="built_in">string</span></span><br><span class="line">s = c</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> d == <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">  s = d</span><br><span class="line">&#125;</span><br><span class="line">s = d <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line">s = &lt;<span class="built_in">string</span>&gt;d</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;报错了&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; age?: <span class="built_in">number</span> &#125;</span><br><span class="line">e = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span> &#125;</span><br><span class="line">e = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">f</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;</span><br><span class="line">f = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>: <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line">g = <span class="keyword">function</span> (<span class="params">n1, n2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">h</span>: <span class="built_in">number</span>[]</span><br><span class="line">h = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">i</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">l</span>: [<span class="built_in">string</span>, <span class="built_in">string</span>]</span><br><span class="line">l = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line">  <span class="title class_">Male</span> = <span class="number">0</span>,</span><br><span class="line">  <span class="title class_">Female</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">j</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">gender</span>: <span class="title class_">Gender</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">k</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125; &amp; &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;</span><br><span class="line">k = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;</span><br><span class="line"><span class="keyword">type</span> num = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">6</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">m</span>: num</span><br><span class="line">m = <span class="number">1</span></span><br><span class="line">m = <span class="number">2</span></span><br><span class="line">m = <span class="number">3</span></span><br></pre></td></tr></table></figure></div>

<h3 id="配置文件—tsconfig-json"><a href="#配置文件—tsconfig-json" class="headerlink" title="配置文件—tsconfig.json"></a>配置文件—tsconfig.json</h3><p>（*_ 任意文件夹 ，_ 任意文件）</p>
<ul>
<li>include: 包含的文件（匹配）</li>
<li>exclude: 不包含的文件</li>
<li>files:包含的文件（文件名）</li>
</ul>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/hello/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;hello.ts&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>compilerOptions</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">//指定编译为js的版本，可选值：&quot;ES3&quot;, &quot;ES5&quot;, &quot;ES6&quot;, &quot;ES2015&quot;, &quot;ES2016&quot;, &quot;ES2017&quot;, &quot;ES2018&quot;,</span></span><br><span class="line">    <span class="comment">//&quot;ES2019&quot;, &quot;ES2020&quot;, &quot;ES2021&quot;, &quot;ES2022&quot;, &quot;ES2023&quot;, &quot;ESNext&quot;</span></span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">    <span class="comment">//指定使用模块化规范，可选值：&quot;CommonJS&quot;, &quot;AMD&quot;, &quot;System&quot;, &quot;UMD&quot;, &quot;ES6&quot;, &quot;ES2015&quot;,</span></span><br><span class="line">    <span class="comment">//&quot;ES2020&quot;, &quot;ESNext&quot;, &quot;None&quot;, &quot;ES2022&quot;, &quot;Node16&quot;, &quot;NodeNext&quot;</span></span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">     <span class="comment">// 指定项目使用的库，一般不动</span></span><br><span class="line">    <span class="comment">// &quot;lib&quot;:[],</span></span><br><span class="line">    <span class="comment">// 指定编译后文件所在的目录</span></span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>:<span class="string">&quot;./dist&quot;</span>,</span><br><span class="line">    <span class="comment">// 所有全局作用于的代码都会合并到同一个文件中</span></span><br><span class="line">    <span class="comment">// &quot;outFile&quot;: &quot;&quot;,</span></span><br><span class="line">    <span class="comment">// 是否对js文件进行编译默认false</span></span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 是否检查js是否符合语法规范默认false</span></span><br><span class="line">    <span class="string">&quot;checkJs&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 是否移除注释</span></span><br><span class="line">    <span class="string">&quot;removeComments&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 是否不生成编译后的文件</span></span><br><span class="line">    <span class="string">&quot;noEmit&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 当有错误时不生成编译后的文件</span></span><br><span class="line">    <span class="string">&quot;noEmitOnError&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 所有严格检查的总开关</span></span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 是否使用js严格模式默认false</span></span><br><span class="line">    <span class="string">&quot;alwaysStrict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 不允许隐式的any类型</span></span><br><span class="line">    <span class="string">&quot;noImplicitAny&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 不允许不明确的this</span></span><br><span class="line">    <span class="string">&quot;noImplicitThis&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 严格模式检查空值</span></span><br><span class="line">    <span class="string">&quot;strictNullChecks&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></div>

<h3 id="webpack-打包-ts-代码"><a href="#webpack-打包-ts-代码" class="headerlink" title="webpack 打包 ts 代码"></a>webpack 打包 ts 代码</h3><p>一</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></div>

<p>二</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">npm i -D webpack webpack-cli typescript ts-loader</span><br></pre></td></tr></table></figure></div>

<p>三<br>创建 webpack.config.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入一个包</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// webpack所有配置信息都应写在module.exports</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 指定入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.ts&#x27;</span>, <span class="comment">// 指定打包文件所在目录</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 指定打包文件的目录</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>), <span class="comment">// 打包后文件的文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;, <span class="comment">// 指定webpack打包要使用的模块</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 指定要加载的规则</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// test指定的是规则生效的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="comment">// 要使用的loader</span></span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;ts-loader&#x27;</span>, <span class="comment">// 要排除的文件</span></span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>四<br>创建 tsconfig.json</p>
<div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">        <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>五<br>在 package.json 中·添加“buid”:”webpack”</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Ts/ts_5.png"
                     
                ></p>
<!-- ![0a2d9e5443696b4e41b75d11afa5c3c7.png](en-resource://database/885:1) -->

<p>六<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Ts/ts_6.png"
                     
                ><br><code>const HTMLWebpackPlugin = require(&#39;html-webpack-plugin&#39;)</code></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置webpack插件</span></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">HTMLWebpackPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">//title:&quot;标题&quot;</span></span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>

<p>七<br>安装 webpack-dev-server<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Ts/ts_7_1.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Ts/ts_7_2.png"
                     
                ><br>open 后面可不加<br>八<br>安装 clean-webpack-plugin<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Ts/ts_8_1.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Ts/ts_8_2.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Ts/ts_8_3.png"
                     
                ></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用来设置引入模块</span></span><br><span class="line"><span class="comment">//js,ts文件可作为模块进行打包</span></span><br><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line">  <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>九<br>安装 babel<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Ts/ts_9_1.png"
                     
                ><br>在 webpack.config.js 中</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// 配置babel</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// 指定加载器</span></span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">            <span class="comment">// 设置babel</span></span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="comment">// 设置加载环境</span></span><br><span class="line">              <span class="attr">presets</span>: [</span><br><span class="line">                [</span><br><span class="line">                  <span class="comment">// 指定环境的插件</span></span><br><span class="line">                  <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">                  <span class="comment">// 配置信息</span></span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="comment">// 要兼容的目标浏览器</span></span><br><span class="line">                    <span class="attr">targets</span>: &#123;</span><br><span class="line">                      <span class="attr">chrome</span>: <span class="string">&#x27;58&#x27;</span>,</span><br><span class="line">                      <span class="attr">ie</span>: <span class="string">&#x27;11&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 指定corejs的版本</span></span><br><span class="line">                    <span class="attr">corejs</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">                    <span class="comment">// 使用corejs的方式“usage” 表示加载</span></span><br><span class="line">                    <span class="attr">useBuiltIns</span>: <span class="string">&#x27;usage&#x27;</span></span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&#x27;ts-loader&#x27;</span></span><br><span class="line">        ],</span><br></pre></td></tr></table></figure></div>

<p>打包不使用箭头函数<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Ts/ts_9_2.png"
                     
                ></p>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>简单类</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">person</span> &#123;</span><br><span class="line">  <span class="comment">// 实例属性：直接定义的属性，需要通过实例对象访问</span></span><br><span class="line">  <span class="attr">name</span>: string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="comment">//静态属性（类属性）：使用static开头的属性，直接通过类访问</span></span><br><span class="line">  <span class="keyword">static</span> <span class="attr">age</span>: number</span><br><span class="line">  <span class="comment">// readonly开头的属性表示一个只读的属性无法修改</span></span><br><span class="line">  <span class="comment">// 定义方法</span></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> <span class="title function_">person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br></pre></td></tr></table></figure></div>

<p>构造函数</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string</span><br><span class="line">  <span class="attr">age</span>: number <span class="comment">//构造函数会在对象创建时调用</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>) &#123;</span><br><span class="line">    <span class="comment">// 在实例方法中，this就表示当前的实例</span></span><br><span class="line">    <span class="comment">// 在构造函数中当前对象就是新建的那个是对象</span></span><br><span class="line">    <span class="comment">// 可通过this向新建的对象中添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;小黑&#x27;</span>, <span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog)</span><br></pre></td></tr></table></figure></div>

<p>继承</p>
<div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;~~&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Dog继承Aniaml</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在跑`</span>)</span><br><span class="line">  &#125; <span class="comment">// 方法的重写</span></span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;wangwang&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;小黑&#x27;</span>, <span class="number">12</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog)</span><br><span class="line">dog.<span class="title function_">say</span>()</span><br><span class="line">dog.<span class="title function_">run</span>()</span><br></pre></td></tr></table></figure></div>

<p>super</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: string</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;~~&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: number</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果在子类中写了构造函数则必须通过super对父类构造函数进行调用</span></span><br><span class="line">    <span class="variable language_">super</span>(name)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在类的方法中使用super就表示当前类的父亲</span></span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">say</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;小黑&#x27;</span>, <span class="number">12</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog)</span><br><span class="line">dog.<span class="title function_">say</span>()</span><br></pre></td></tr></table></figure></div>

<p>抽象类</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 抽象类：以abstract开头的是抽象类</span></span><br><span class="line">  <span class="comment">// 抽象类和其他类区别不大只是不能用来创建</span></span><br><span class="line">  <span class="comment">// 抽象类就是专门用来继承的</span></span><br><span class="line">abstract <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="attr">name</span>:string;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:string </span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 抽象方法</span></span><br><span class="line">  <span class="comment">// 使用abstract定义的方法，没有方法体</span></span><br><span class="line">  <span class="comment">// 抽象方法只能定义在抽象类中，子类必须对抽象方法重写</span></span><br><span class="line">   abstract <span class="title function_">say</span>():<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;wang&quot;</span>);</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog=<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;小黑&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog);</span><br><span class="line">dog.<span class="title function_">say</span>()</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>接口</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">type myType = &#123;</span><br><span class="line">  <span class="attr">name</span>: string,</span><br><span class="line">  <span class="attr">age</span>: number</span><br><span class="line">&#125; <span class="comment">// 接口用来定义一个类，用来定义一个类中应该包含那些属性和方法 // 接口也可以当成类型声明去使用</span></span><br><span class="line">interface myInterface &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line">interface myInterface &#123;</span><br><span class="line">  <span class="attr">gender</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: myInterface = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">11</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125; <span class="comment">// 接口可以在定义类的时候去限制类的结构 // 接口中的所有属性都不能有实际值 // 接口只定义对象的结构，而不考虑实际值 // 接口中所有的方法都是抽象方法</span></span><br><span class="line">interface myInter &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="title function_">say</span>(): <span class="keyword">void</span>;</span><br><span class="line">&#125; <span class="comment">// 定义时 可使用类去实现一个接口 // 实现接口就是满足接口的要求</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> implements myInter &#123;</span><br><span class="line">  <span class="attr">name</span>: string</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: string</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">say</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>属性的封装</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 表示人的类</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// public  修饰的属性可以再任意位置修改</span></span><br><span class="line">    <span class="comment">// private 私有属性，只能在类的内部进行访问</span></span><br><span class="line">    <span class="comment">// protected 受包含的属性只能在当前类和当前类的子类中访问</span></span><br><span class="line">    <span class="comment">// 添加方法get和set</span></span><br><span class="line">    <span class="attr">name</span>: string</span><br><span class="line">    <span class="attr">age</span>: number</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: string, age: number</span>) &#123;</span><br><span class="line">      ;(<span class="variable language_">this</span>.<span class="property">name</span> = name), (<span class="variable language_">this</span>.<span class="property">age</span> = age)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="comment">// 和上面等价语法糖 // class Person&#123; //   constructor(private name: string, private age:number)&#123; //     this.name=name, //     this.age=age //   &#125; // &#125;</span></span><br><span class="line">  <span class="keyword">const</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="number">12</span>) <span class="comment">//  现在属性是在对象中设置的，属性可以任意修改，会导致数据变得不安全</span></span><br><span class="line">  per.<span class="property">name</span> = <span class="string">&#x27;ls&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(per)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></div>

<p>泛型</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 在定义函数或者类时，遇到不明确类型就可以使用泛型</span></span><br><span class="line">  <span class="keyword">function</span> fn&lt;T&gt;(<span class="attr">a</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 可以直接调用具有泛型的类</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="title function_">fn</span>(<span class="number">10</span>) <span class="comment">//不指定泛型Ts可自行推断类型</span></span><br><span class="line">  <span class="keyword">let</span> result1 = fn &lt; string &gt; <span class="string">&#x27;hello&#x27;</span> <span class="comment">//指定泛型</span></span><br><span class="line">  <span class="keyword">function</span> fn2&lt;T, K&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: K): T &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">  &#125;</span><br><span class="line">  fn2 &lt; number, string &gt; (<span class="number">123</span>, <span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></div>
]]></content>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/2023/03/05/webpack/</url>
    <content><![CDATA[<p>webpack 是前端资源加载&#x2F;打包工具，它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。在做 vue 项目和 react 项目时都会可能用到，当前最火的前端构建工具之一，把前端各种资源编译打包，最后输出：js 文件、css 文件、png 文件，可以减少文件资源的请求。</p>
<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></div>

<ul>
<li>开发时用：-D （–save -dev）</li>
<li>开发，上线都用： -S (–save)</li>
</ul>
<h6 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h6><div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">npm i webpack@<span class="number">5</span>.<span class="number">42</span>.<span class="number">1</span> webpack-cli@<span class="number">4</span>.<span class="number">7</span>.<span class="number">2</span> -D</span><br></pre></td></tr></table></figure></div>

<h6 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h6><p>1.在项目根目创建 webpack.config .js 的 webpack 配置文件</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span> <span class="comment">//mode可选development (开发用)和production（上线用）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>2.在 package.json 的 script 节点下新增 dev 脚本</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>:&#123;<span class="string">&quot;dev&quot;</span>:<span class="string">&quot;webpack&quot;</span>&#125;<span class="comment">//可用npm run dev</span></span><br></pre></td></tr></table></figure></div>

<p>3.在终端运行 npm run dev</p>
<hr>
<h6 id="自定义打包入口与出口"><a href="#自定义打包入口与出口" class="headerlink" title="自定义打包入口与出口"></a>自定义打包入口与出口</h6><p>在 webpack.config.js 文件中通过 entry 节点指定打包的入口通过 output 指定打包的出口</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 打包入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出文件的存放路径</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="comment">//输出文件的名称</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;js/main.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h6 id="webpack-中的插件"><a href="#webpack-中的插件" class="headerlink" title="webpack 中的插件"></a>webpack 中的插件</h6><p><strong>webpack-dev-server（工具）</strong><br>当修改源代码，webpack 会自动进行打包和构建<br>webpack-dev-server 生成到内存中的文件，默认放到了项目的根目录在，而且是虚拟的，不可见的。<br><strong>安装</strong></p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">npm i webpack-dev-server@<span class="number">3</span>.<span class="number">11</span>.<span class="number">1</span> -D</span><br></pre></td></tr></table></figure></div>

<p><strong>配置</strong><br>修改 webpack.json-&gt;scripts 中的 dev 命令</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack serve&quot;</span>,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></div>

<p><strong>html-webpack-plugin（插件）</strong><br>可以通过此插件自定义 index.html 页面的内容<br><strong>安装</strong></p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">npm i html-webpack-plugin@<span class="number">5</span>.<span class="number">3</span>.<span class="number">2</span> -D</span><br></pre></td></tr></table></figure></div>

<p>配置(在 webpack.config.js 中）</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">plugins</span>: [htmlPlugin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h6 id="dev-server-节点"><a href="#dev-server-节点" class="headerlink" title="dev server 节点"></a>dev server 节点</h6><p>在 webpack.confg.js 配置文件中，可以通过 devserver 节点对 webpack-dev-server 插件进行更多配置</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,<span class="comment">//初次打包后打开浏览器</span></span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="comment">//打包所使用的主机地址</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">80</span>,<span class="comment">//打包所用端口</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></div>

<h6 id="loader-加载器"><a href="#loader-加载器" class="headerlink" title="loader 加载器"></a>loader 加载器</h6><p><strong>安装</strong></p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">npm i style-loader@<span class="number">3</span>.<span class="number">0</span>.<span class="number">0</span> css-loader@<span class="number">5</span>.<span class="number">2</span>.<span class="number">6</span> -D</span><br></pre></td></tr></table></figure></div>

<p>在 webpack.config.js 的 moducle-&gt;rules 数据中添加 loader</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h6 id="打包处理-less-文件"><a href="#打包处理-less-文件" class="headerlink" title="打包处理 less 文件"></a>打包处理 less 文件</h6><p><strong>安装</strong></p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">npm i less-loader@<span class="number">10</span>.<span class="number">0</span>.<span class="number">1</span> less@<span class="number">4</span>.<span class="number">1</span>.<span class="number">1</span> -D</span><br></pre></td></tr></table></figure></div>

<p><strong>配置</strong><br>在 webpack.config.js 的 module-&gt;rules 数据中添加 loader 规则</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">mouder</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h6 id="打包处理样式中-url-路径相关的文件"><a href="#打包处理样式中-url-路径相关的文件" class="headerlink" title="打包处理样式中 url 路径相关的文件"></a>打包处理样式中 url 路径相关的文件</h6><p><strong>安装</strong></p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">npm i url0loader@<span class="number">4</span>.<span class="number">1</span>.<span class="number">1</span>file-loader@<span class="number">6</span>.<span class="number">2</span>.<span class="number">0</span> -D</span><br></pre></td></tr></table></figure></div>

<p><strong>配置</strong><br>在 webpack.config.js 的 module-&gt;rules 数组中添加 loader</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">mouder</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.jpg|png|gif$/</span>,</span><br><span class="line">      <span class="attr">use</span>: [</span><br><span class="line">        <span class="string">&#x27;url-loader?                                              limit=170&amp;outputPath=images&#x27;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h6 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h6><p>webpack 无法处理的高级 js 语法使用 bable-loader<br><strong>安装</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i babel-loader@8.2.2 @bsbel/core@7.14.6 @babel/plugin-proposal-decorators@7.14.5 -D</span><br></pre></td></tr></table></figure></div>

<p><strong>配置</strong><br>在 webpack.config.js 的 module-&gt;rules 添加 loader</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    <span class="attr">use</span>: [<span class="string">&#x27;babel-loader&#x27;</span>],</span><br><span class="line">    <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在项目中创建 babel.confing.js 的配置文件定义 babel 的配置</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [[<span class="string">&#x27;@babel/plugin-proposal-decorators&#x27;</span>, &#123; <span class="attr">legacy</span>: <span class="literal">true</span> &#125;]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack serve&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bulid&quot;</span>: <span class="string">&quot;webpack --mode production&quot;</span><span class="comment">//发布</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></div>

<p>通过–model 指定参数会覆盖 webpack.config.js 中的 model 选项</p>
<p>把 js 文件统一生成到 js 目录中<br>在 webpack.config.js 中 output 中的 filename‘js&#x2F;bundle.js’<br>把 images 文件放在 image 目录中<br>修改 webpack.config.js 中的 url-loader 新增 outputPath 选项可指定图片文件的输出路径</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.jpg|png|gif$/</span>,</span><br><span class="line">        <span class="comment">// use: [&#x27;url-loader?limit=170&amp;outputPath=images&#x27;]</span></span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">limit</span>: <span class="number">170</span>,</span><br><span class="line">            <span class="attr">outputPath</span>: <span class="string">&#x27;images&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure></div>

<h5 id="打包自动清理-dist-下的旧文件"><a href="#打包自动清理-dist-下的旧文件" class="headerlink" title="打包自动清理 dist 下的旧文件"></a>打包自动清理 dist 下的旧文件</h5><p>安装</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">npm i clean-webpack-plugin@<span class="number">3</span>.<span class="number">0</span>.<span class="number">0</span> -D</span><br></pre></td></tr></table></figure></div>

<p>配置<br>按需导入插件,得到插件的构造函数，创建插件的实例化对象</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cleanPlugin = <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>()</span><br></pre></td></tr></table></figure></div>

<p>把创建的实例对象挂载到 plugins 节点中</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="attr">plugins</span>: [htmlPlugin, cleanPlugin],</span><br></pre></td></tr></table></figure></div>

<h6 id="Source-Map"><a href="#Source-Map" class="headerlink" title="Source Map"></a>Source Map</h6><p>是一个信息文件，存在位置信息，<br>在 webpack.config.js 中加 devtool:”eval-source-map,”(开发用)<br>只定位行号，不显示源码<br>devtool:”nosources-sours-map 或 SourceMap”（上线用）</p>
]]></content>
  </entry>
</search>
